
vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

// Commutative smooth minimum function. Provided by Tomkh, and taken 
// from Alex Evans's (aka Statix) talk:
float smin(float a, float b, float k){

   float f = max(0., 1. - abs(b - a)/k);
   return min(a, b) - k*.25*f*f;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord ){
	//vec2 fragCoord = gl_FragCoord.xy;
    //vec2 iResolution = u_resolution;
    //float iTime = u_time;
    //vec4 fragColor;
    
    vec3 color;

    vec2 st = (fragCoord - .5 * iResolution.xy) / iResolution.y;
    
	st *=7.;
    
    // Tile
    vec2 i_st = floor(st);
    vec2 f_st = fract(st);
    
    float m_dist = 1.; // min distance
    
    for(int j=-2; j<=2; j++) {
        for(int i=-2; i<=2; i++) {

            // Neighbor place in the grid
            vec2 neighbor = vec2(float(i), float(j));
            
            // Random position from current + neighbor place in the grid
            vec2 offset = random2(i_st + neighbor);
            
            // Animate the offset
            offset = 0.5 + 0.5 * sin(iTime + 6.2831 * offset);
            
            // Position of the cell
            vec2 pos = neighbor + offset - f_st;
            
            // Cell distance
            float dist = length(pos);
            
            // Metaball
            m_dist = smin(m_dist, dist, 0.90);
           
            
        }
    }
    
   color = 1.0 - vec3(smoothstep(0.0, fwidth(m_dist * iResolution.x/5.) * 1.5, m_dist));
   // color = vec3(smoothstep(0.0, fwidth(m_dist) * 100., m_dist));
   	//color = sqrt(max(color, 0.)); // Rough gamma correction.
    fragColor = vec4(color, 1.0);
   // gl_FragColor = fragColor;
    
}